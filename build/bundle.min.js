var Graph=(function(){'use strict';class Pen{constructor(){this.html=''}drawOn(drawing){drawing.html+=this.html}}class LinePen extends Pen{constructor(){super();this.actions=[];this.thickness=0;this.lineColor='black';this.strokeDashArray=''}setThickness(thickness){this._commitPath();this.thickness=thickness;return this}setLineColor(color){this._commitPath();this.lineColor=color;return this}setDashed(){this._commitPath();this.strokeDashArray='5,5';return this}setDotted(){this._commitPath();this.strokeDashArray='2, 2';return this}setSolid(){this._commitPath();this.strokeDashArray='';return this}startAt(point){this.actions.push(`M ${point.x},${point.y}`);return this}lineTo(point){this.actions.push(`L ${point.x},${point.y}`);return this}connect(){this.actions.push('Z ');return this}_commitPath(){if(this.actions.length===0)return;let pathString=`<path stroke-width="${this.thickness}"`+`stroke="${this.lineColor}"`+`stroke-dasharray="${this.strokeDashArray}"`+'fill="transparent" '+`d="${this.actions.reduce((accu, curr) => accu += curr)}"></path>`;this.actions=[];this.html+=pathString}drawOn(drawing){this._commitPath();drawing.html+=this.html;this.html='';return this}}class TextPen extends Pen{constructor(){super();this.reset()}reset(){this.transforms=[];this.text='';this.point={x:0,y:0};this.html=''}setText(str){this.text=str;return this}setPostion(point){this.point=point;return this}rotate(angle,pivot){if(pivot===undefined)pivot={x:0,y:0};this.transforms.push(`rotate(${angle},${pivot.x},${pivot.y})`);return this}translate(x,y){this.transforms.push(`translate(${x},${y})`)}_commit(){if(this.text==='')return;this.html+=`<text class="text-pen"x="${this.point.x}"y="${this.point.y}"`+`transform="${this.transforms.reduce((accu, curr) => accu + curr,'')}">${this.text}</text>`}drawOn(drawing){this._commit();drawing.html+=this.html;this.reset();return this}}class PointGenerator1D{constructor(orientation,x0,y0,x1,y1){if(orientation==="horizontal"){this.isHorizontal=true}else if(orientation==="vertical"){this.isHorizontal=false}else{console.trace("Error: unregconized orientation: "+orientation)}this.x0=x0;this.y0=y0;this.x1=x1;this.y1=y1;this.x=null;this.y=null}lengthAlongAxisIs(length){if(this.isHorizontal){this.x=length}else{this.y=length}return this}lengthOrthogonalToAxisIs(){if(this.isHorizontal){this.y=length}else{this.x=length}return this}fromBaseBorder(distance){if(this.isHorizontal){this.y=this.y1-distance}else{this.x=this.x0+distance}return this}fromTopBorder(distance){if(this.isHorizontal){this.y=this.y0+distance}else{this.x=this.x1-distance}return this}fromStartBorder(distance){if(this.isHorizontal){this.x=this.x0+distance}else{this.y=this.y0+distance}return this}fromEndBorder(distance){if(this.isHorizontal){this.x=this.x1-distance}else{this.y=this.y1-distance}return this}generate(){return{x:this.x,y:this.y}}fromBaseStartCorner(delta){if(this.isHorizontal){this.x=this.x0+delta;this.y=this.y1-delta}else{this.x=this.x0+delta;this.y=this.y0+delta}return this}fromBaseEndCorner(delta){if(this.isHorizontal){this.x=this.x1-delta;this.y=this.y1-delta}else{this.x=this.x0+delta;this.y=this.y1-delta}return this}fromTopStartCorner(delta){if(this.isHorizontal){this.x=this.x1+delta;this.y=this.y0+delta}else{this.x=this.x1-delta;this.y=this.y0+delta}return this}fromTopEndCorner(delta){if(this.isHorizontal){this.x=this.x1-delta;this.y=this.y0+delta}else{this.x=this.x1-delta;this.y=this.y0+delta}return this}fromHalfMajorAxis(delta){if(this.isHorizontal){this.x=(this.x0+this.x1)/2+delta}else{this.y=(this.y0+this.y1)/2+delta}return this}fromHalfMinorAxis(delta){if(this.isHorizontal){this.y=(this.y0+this.y1)/2+delta}else{this.x=(this.x0+this.x1)/2+delta}return this}}const utils={getTextMetrics:(text,font)=>{const textMeasure=document.getElementById("text-measure-util");textMeasure.style.font=font;textMeasure.innerText=text;const height=textMeasure.clientHeight+1;const width=textMeasure.clientWidth+1;return{height,width}},randomColor:()=>{const randomColorComponent=()=>Math.floor(Math.random()*256);return`rgb(${randomColorComponent()},${randomColorComponent()},${randomColorComponent()})`}};class Axis{constructor(config){this.orientation=config.orientation;this.label=config.label||"";this.drawing=config.drawing;this.width=config.width||600;this.height=config.height||600;this.padding=config.padding||30;this.fontSize=config.fontSize||16;this.ticks=config.ticks||28;this.minorTicksPerMajorTick=config.minorTicksPerMajorTick||4;this.majorTickSize=config.majorTickSize||10;this.minorTickSize=config.minorTickSize||5;this.pen=new LinePen().setThickness(1).setLineColor("black");this.pointGenerator=new PointGenerator1D(this.orientation,0,0,this.width,this.height)}draw(){this._drawLine();this._drawLabel();this._drawTicks();this._drawGridLines()}_drawLine(){const startPoint=this.pointGenerator.fromBaseStartCorner(this.padding).generate();const endPoint=this.pointGenerator.fromBaseEndCorner(this.padding).generate();this.pen.startAt(startPoint).lineTo(endPoint);this.pen.drawOn(this.drawing)}_drawLabel(){if(this.orientation==="horizontal"){this._drawLabelHorizonal()}else{this._drawLabelVertical()}}_drawLabelHorizonal(){const textMetrics=utils.getTextMetrics(this.label,`normal ${this.fontSize}px Arial`);const offset=-Math.round(textMetrics.width/2);const textStartPoint=this.pointGenerator.fromHalfMajorAxis(offset).fromBaseBorder(this.padding-this.fontSize-this.majorTickSize).generate();new TextPen().setText(this.label).setPostion(textStartPoint).drawOn(this.drawing)}_drawLabelVertical(){const textMetrics=utils.getTextMetrics(this.label,`normal ${this.fontSize}px Arial`);const offset=Math.round(textMetrics.width/2);const textStartPoint=this.pointGenerator.fromHalfMajorAxis(offset).fromBaseBorder(this.padding-this.fontSize).generate();new TextPen().setText(this.label).setPostion(textStartPoint).rotate(-90,textStartPoint).drawOn(this.drawing)}_drawTicks(){const axisLength=this.width-2*this.padding;const distanceBetweenTicks=axisLength/this.ticks;for(let i=0;i<this.ticks+1;i+=1){if(i%this.minorTicksPerMajorTick===0){this._drawTick(i*distanceBetweenTicks+this.padding,this.majorTickSize)}else{this._drawTick(i*distanceBetweenTicks+this.padding,this.minorTickSize)}}this.pen.drawOn(this.drawing)}_drawTick(lengthAlongAxis,tickSize){const startPoint=this.pointGenerator.fromStartBorder(lengthAlongAxis).fromBaseBorder(this.padding).generate();const endPoint=this.pointGenerator.fromStartBorder(lengthAlongAxis).fromBaseBorder(this.padding-tickSize).generate();this.pen.startAt(startPoint).lineTo(endPoint)}_drawGridLines(){const axisLength=this.height-2*this.padding;const distanceBetweenTicks=axisLength/this.ticks;for(let i=0;i<this.ticks;i+=this.minorTicksPerMajorTick){if(i!==0){this._drawGridLine(i*distanceBetweenTicks+this.padding)}}this.pen.drawOn(this.drawing)}_drawGridLine(lengthAlongAxis){const startPoint=this.pointGenerator.fromStartBorder(lengthAlongAxis).fromBaseBorder(this.padding).generate();const endPoint=this.pointGenerator.fromStartBorder(lengthAlongAxis).fromTopBorder(this.padding).generate();this.pen.setDashed().setLineColor("#666").startAt(startPoint).lineTo(endPoint).setSolid().setLineColor("black")}}class Drawing{constructor(width,height){this.elementTagStart='<svg width="'+width+'" height="'+height+'" xmlns="http://www.w3.org/2000/svg">';this.elementTagEnd='</svg>';this.html=''}attachTo(container){container.innerHTML=this.elementTagStart+this.html+this.elementTagEnd}}class PointGenerator{constructor(x0,y0,x1,y1){this.x0=x0;this.y0=y0;this.x1=x1;this.y1=y1;this.x=null;this.y=null}xIs(x){this.x=x;return this}yIs(y){this.y=y;return this}fromTopBorder(distance){this.y=distance;return this}fromBottomBorder(distance){this.y=this.y1-distance;return this}fromRightBorder(distance){this.x=this.x1-distance;return this}fromLeftBorder(distance){this.x=distance;return this}generate(){const{x,y}=this;return{x,y}}fromTopLeftCorner(dx,dy){dy=dy||dx;this.x=dx;this.y=dy;return this}fromBottomLeftCorner(dx,dy){dy=dy||dx;this.x=dx;this.y=this.y1-dy;return this}fromTopRightCorner(dx,dy){dy=dy||dx;this.x=this.x1-dx;this.y=dy;return this}fromBottomRightCorner(dx,dy){dy=dy||dx;this.x=this.x1-dx;this.y=this.y1-dy;return this}halfWidth(){this.x=(this.x0+this.x1)/2;return this}halfHeight(){this.y=(this.y0+this.y1)/2;return this}fromHalfHeight(offset){this.y=(this.y0+this.y1)/2+offset;return this}fromHalfWidth(offset){this.x=(this.x0+this.x1)/2+offset;return this}}class PlotLine{constructor(config){this.width=config.width||300;this.height=config.height||300;this.maxX=config.maxX||300;this.maxY=config.maxY||300;this.dataset=config.dataset||[];this.drawing=config.drawing;this.xOffset=config.xOffset||30;this.yOffset=config.yOffset||30;this.html="";this.color=config.color||utils.randomColor();this.pen=new LinePen().setThickness(1).setLineColor(this.color);this.pointGenerator=new PointGenerator(0,0,this.width,this.height)}draw(){if(this.dataset.length===0)return;this.pen.startAt(this.fitOnGraph(this.dataset[0]));for(let i=1;i<this.dataset.length;++i){const coordinate=this.fitOnGraph(this.dataset[i]);this.pen.lineTo(coordinate)}this.pen.drawOn(this.drawing)}fitOnGraph(point){return{x:this.xOffset+point.x*(this.width/this.maxX),y:this.height-(this.yOffset+point.y*(this.height/this.maxY))}}}class Graph{constructor(config){config=config||{};this.width=config.width||600;this.height=config.height||600;this.padding=config.padding||30;this.drawing=config.drawing||new Drawing(this.width,this.height);this.xAxis=this.createXAxis(config);this.yAxis=this.createYAxis(config);this.pointGenerator=new PointGenerator(0,0,this.width,this.height);this.pen=new LinePen().setThickness(1).setLineColor("black");this.plotLines=[]}createXAxis(config){let xAxisConfig=config.xAxis;if(!xAxisConfig){xAxisConfig={xOffset:30,yOffset:30,fontSize:16,ticks:28,minorTicksPerMajorTick:4,majorTickSize:10,minorTickSize:5}}xAxisConfig.drawing=this.drawing;xAxisConfig.orientation="horizontal";xAxisConfig.label=xAxisConfig.label||"X-Axis";xAxisConfig.width=xAxisConfig.width||this.width;xAxisConfig.height=xAxisConfig.height||this.height;xAxisConfig.padding=xAxisConfig.padding||this.padding;return new Axis(xAxisConfig)}createYAxis(config){let yAxisConfig=config.yAxis;if(!yAxisConfig){yAxisConfig={xOffset:30,yOffset:30,fontSize:16,ticks:28,minorTicksPerMajorTick:4,majorTickSize:10,minorTickSize:5}}yAxisConfig.drawing=this.drawing;yAxisConfig.orientation="vertical";yAxisConfig.label=yAxisConfig.label||"Y-Axis";yAxisConfig.width=yAxisConfig.width||this.width;yAxisConfig.height=yAxisConfig.height||this.height;yAxisConfig.padding=yAxisConfig.padding||this.padding;return new Axis(yAxisConfig)}attachTo(container){this.drawing.attachTo(container)}draw(){this.yAxis.draw();this.xAxis.draw();for(let plotLine of this.plotLines){plotLine.draw()}}_drawBorder(){const corners=[this.pointGenerator.fromTopLeftCorner(this.padding).generate(),this.pointGenerator.fromTopRightCorner(this.padding).generate(),this.pointGenerator.fromBottomRightCorner(this.padding).generate(),this.pointGenerator.fromBottomLeftCorner(this.padding).generate()];this.pen.startAt(corners[0]).lineTo(corners[1]).lineTo(corners[2]).lineTo(corners[3]).connect().drawOn(this.drawing)}newPlotLine(dataset,color){const{width,height,drawing}=this;const plotLine=new PlotLine({width,height,maxX:this.width,maxY:this.height,dataset,drawing,xOffset:30,yOffset:30,color});this.plotLines.push(plotLine)}}return Graph}());